# 함수의 데코레이터 사용
def test(func):
    def wrapper():
            print("start !!!")
	            func()
		            print("end !!!")
			        return wrapper

				# @데코레이션을 붙여 함수 생성
				@test
				def hello():
				    print("hello !!")
				        
					# 함수 호출
					hello()

# 학생 리스트를 선언합니다.
students = [
    { "name": "윤인성", "korean": 87, "math": 98, "english": 88, "science": 95 },
        { "name": "연하진", "korean": 92, "math": 98, "english": 96, "science": 98 },
	    { "name": "구지연", "korean": 76, "math": 96, "english": 94, "science": 90 },
	        { "name": "나선주", "korean": 98, "math": 92, "english": 96, "science": 92 },
		    { "name": "윤아린", "korean": 95, "math": 98, "english": 98, "science": 98 },
		        { "name": "윤명월", "korean": 64, "math": 88, "english": 92, "science": 92 },
			    { "name": "황용운", "korean": 90, "math": 88, "english": 100, "science": 90}
			    ]

			    # 학생을 한 명씩 반복합니다.
			    print("이름", "총점", "평균", sep="\t")
			    for student in students:
			        # 점수의 총합과 평균을 구합니다.
				    score_sum = student["korean"] + student["math"] +\
				            student["english"] + student["science"]
					        score_average = score_sum / 4
						    # 출력합니다.
						        print(student["name"], score_sum, score_average, sep="\t")

# 객체를 생성하는 함수를 작성
def create_student(name, korean, math, english, science):
    return {"name": name, "korean": korean, 
                "math": math, "english": english, "science": science}

		students = [ create_student("윤인성", 87, 98, 88, 95),
		             create_student("연하진", 92, 98, 96, 98)
			                ]
					# 학생을 한 명씩 반복합니다.
					print("이름", "총점", "평균", sep="\t")
					for student in students:
					    # 점수의 총합과 평균을 구합니다.
					        score_sum = student["korean"] + student["math"] +\
						        student["english"] + student["science"]
							    score_average = score_sum / 4
							        # 출력합니다.
								    print(student["name"], score_sum, score_average, sep="\t")

# 객체를 생성하는 함수를 작성
def create_student(name, korean, math, english, science):
    return {"name": name, "korean": korean, 
                "math": math, "english": english, "science": science}

		# 학생을 처리하는 함수 선언
		def student_get_sum(student):   # 총점
		    return student['korean'] + student['math'] \
		            + student['english'] + student['science']

			    def student_get_avg(student):   #평균
			        return student_get_sum(student) / 4

				def student_to_string(student):   #개인 학생의 정보 출력
				    print("{}\t{}\t{}".format(
				            student["name"], student_get_sum(student),
					        student_get_avg(student)))

students = [
    create_student("윤인성", 87, 98, 88, 95 ),
        create_student("연하진", 92, 98, 96, 98 ),
	    create_student("구지연", 76, 96, 94, 90 ),
	        create_student("나선주", 98, 92, 96, 92 )
		]

		# 학생을 한 명씩 자료 출력
		print("이름", "총점", "평균", sep="\t")
		for student in students:
		    print(student_to_string(student))

# 클래스 생성 class 클래스명 :
class Student:   # 클래스 정의
    def __init__(self, name):
            self.name = name
	    #     def 함수명(self, ...):
	    #         self.

	    # Student 클래스의 오브젝트 생성
	    a = Student('홍길동')    # 클래스 생성은 클래스 명 ('홍길동'), 생성자
	    print(a.name)

class Student:
    def __init__(self, name, korean, math, english, science):  #변수 초기화
            self.name = name
	            self.korean = korean
		            self.math = math
			            self.english = english
				            self.science = science
					        def get_sum(self):
						        return self.korean + self.math + self.english + self.science
							    def get_avg(self):
							            return self.get_sum() / 4
								        def to_string(self):
									        return "{}\t{}\t{}".format(
										        self.name, self.get_sum(),
											        self.get_avg())

students = [
    Student("윤인성", 87, 98, 88, 95 ),
        Student("연하진", 92, 98, 96, 98 ),
	    Student("구지연", 76, 96, 94, 90 ),
	        Student("나선주", 98, 92, 96, 92 )
		]

		print("이름", "총점", "평균", sep="\t")
		for student in students:
		    print(student.to_string())

# 키보드에서 이름, 국어, 영어 성적을 입력받아 자료에 저장 한 후
# 이름에 'q'가 입력되면 
# 저장된 각 자료의 이름, 총점, 평균을 출력
# 전체 입력된 인원수를 출력

class Student:
    def __init__(self, name, korean, english):  #변수 초기화
            self.name = name
	            self.korean = korean
		            self.english = english
			            
				        def get_sum(self):   # 총점
					        return self.korean + self.english
						    
						        def get_avg(self):   # 평균
							        return self.get_sum() / 2
								    
								        def to_string(self):  # 개인의 정보를 문자로
									        return "{}\t{}\t{}".format(
										        self.name, self.get_sum(),
											        self.get_avg())
												    def to_str(self):
												            return "{}, {}, {}".format(self.name, self.korean, self.english)

# 키보드에서 이름, 국어, 영어 성적을 입력받아 자료에 저장 한 후
# 이름에 'q'가 입력되면 
# 저장된 각 자료의 이름, 총점, 평균을 출력
# 전체 입력된 인원수를 출력

students = []

while True:
    name = input("이름 입력: ")
        if name in 'qQ':   # 이름에 q 또는 Q가 입력되면 입력 종료
	        print("입력 종료")
		        break
			    scores = input("국어, 영어 성적 입력: ").split()
			        if len(scores) !=2:
				        print("국어 영어 성적을 입력하세요: ")
					        continue
						    
						        
							    korean = int(scores[0])
							        english = int(scores[1])
								    # 학생 자료 추가 
								        students.append(Student(name, korean, english))

# 저장된 각 자료의 이름, 총점, 평균을 출력
print("이름", "총점", "평균", sep="\t")
for student in students:
    print(student.to_string())
        
	print("입력된 학생의 총 인원수: ".len(students))

for i in range(len(students)):
    print(students[i].to_string())

sutdents = []

while True:
    name = input("이름 입력: ")
        if name in 'qQ':    # 이름에 q 또는 Q가 입력되면 입력 종료
	        print("입력 종료")
		        break
			    scores = input("국어, 영어 성적 입력: ").split()
			        if len(scores) !=2:
				        print("국어 영어 성적을 입력하세요: ")
					        continue
						    
						        
							    korean = int(scores[0])
							        english = int(scores[1])
								    # 학생 자료 추가 
								        students.append(Student(name, korean, english))
									    file.write(student.to_str()+'\n')
									    # students.append(Student(name, Korean, english))

# 클래스의 상속이 있는 경우 인스턴스가 어느 클래스인지 확인
# isinstance(인스턴스, 클래스) : type(인스턴스) == 클래스
class Human:
    def __init__(self):
            pass
	        
		class Student(Human): # class 클래스명(클래스명_1) 클래스명_1의 내용을 상속받음
		    def __init__(self):
		            pass
			        
				student = Student()

				print("isinstance(student, Human) : ", isinstance(student, Human))
				print("isinstance(student, Student) : ", isinstance(student, Student))
				print("type(student) == Human) : ", type(student) == Human)

				human = Human()
				print("isinstance(student, Human) : ", isinstance(student, Human))
				print("isinstance(student, Student) : ", isinstance(student, Student))

# 클래스 상속
class Student:
    def study(self):
            print("공부를 합니다.")
	    class Teacher:
	        def teach(self):
		        print("가르칩니다.")

			classroom = [Student(), Teacher(), Teacher(), Student(), Student()]

			for person in classroom:
			    if isinstance(person, Student):
			            person.study()
				        elif isinstance(person, Teacher):
					        person.teach()

class Student:
    def __init__(self, name, korean, english):  #변수 초기화
            self.name = name
	            self.korean = korean
		            self.english = english
			            
				        def get_sum(self):   # 총점
					        return self.korean + self.english
						    
						        def get_avg(self):   # 평균
							        return self.get_sum() / 2
								    
								        def __str__(self):
									        return "{}\t{}\t{}".format(
										        self.name, self.get_sum(),
											        self.get_avg())
												    
												        def __eq__(self, value):
													        return self.get_sum() == value.get_sum()
														    
														        def __gt__(self, value):
															        return self.get_sum() > value.get_sum()

															student1 = Student('test', 99, 90)
															student2 = Student('test123', 88, 90)
															print(str(student1), str(student2))
															print("두 학생의 성적은 같다 : ", student1 == student2)
															if student1 > student2:
															    print("{}의 성적이 {}의 성적보다 크다".format(student1.name, 
															                                           student2.name))
																				   # str(student)   # 언더라인 언더라인 함수 불러오는 방법

															# class 변수 
															class Student:
															    count = 0   # 클래스 변수 선언, 사용은 클래스명.클래스변수
															        def __init__(self, name, korean, english): # 변수 초기화
																        self.name = name
																	        self.korean = korean
																		        self.english = english
																			        
																				        Student.count += 1
																					        print("{}번째 학생".format(Student.count))

															students = [
															    Student('aa', 90, 80),
															        Student('bb', 80, 90)
																]

print(Student.count)
print(students[0].name)

students.append(Student('append', 80, 90))
