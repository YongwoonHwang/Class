nums = [1,2,3,4,5,6]

r_nums = reversed(nums)

print("reversed nums : ", r_nums)

print(next(r_nums))
print(next(r_nums))
print(next(r_nums))
print(next(r_nums))
print(next(r_nums))
print(next(r_nums))

print_3_times() # 함수를 호출하기 전에 함수는 반드시 선언이 되어 있어야 함

# 1. 함수 만들기 : def 함수명():
#    코드 작성 ...
def print_3_times():
    print("Hello")
        print("Hello")
	    print("Hello")

	    # 매개변수가 있는 함수 정의 
	    def print_n_times(value, n):
	        for i in range(n):
		        print(value)

print_n_times('test', 3)

# 가변 매개변수 : 함수명(매개변수, .., *가변 매개변수명)
def print_n_var_times(n, *values):
    for i in range(n):
            for value in values:
	                print(value)
			        print()
				print_n_var_times(2, 'test', 'hello', 'python')

# 가변 매개변수 : 함수명(매개변수, .., *가변 매개변수명)
def print_n_times(value, n=2):
    for i in range(n):
                print(value)
		    print()
		    print_n_times('test')
		    print_n_times('hello', n=3)

# 기본 매개변수와 가변 매개변수가 같이 오는 경우 : 가변, 기본 순서로 (잘못된 예)
def print_n_times(n=2, *values):
    for i in range(n):
            for value in values:
	                print(value)
			        print()
				print_n_times(2, 'test', 'hello', 'python')
				print_n_times('test', 'hello', 'python')  # error

# 기본 매개변수와 가변 매개변수가 같이 오는 경우 : 가변, 기본 순서로 (잘된 예)
def print_n_times(*values, n=2):
    for i in range(n):
            for value in values:
	                print(value)
			        print()
				print_n_times('test', 'hello', 'python')

# 일반 매개변수, 가변 매개변수, 키워드 매개변수 순서로
def test_func(a, b=10, c=20):
    print(a+b+c)
        
	test_func(a=10, b=20, c=30) #60
	test_func(10)  #10 + 10 + 20
	test_func(c=100, b=20, a=100)
	test_func(a=10, c=300)

def test_func(a, b=10, c=20):
    return (a+b+c)  #함수 호출한 곳으로 값을 돌려 줌

    a = test_func(a=10, b=20, c=30)
    b = test_func(100)
    print(a,b)

def test_f():
    print(atest)
        func_val = 'func var'

atest = 'test'
test_f()
func_val

# start, stop, step을 이용하여 합을 구하는 함수 작성 
def sum_func(start=0, stop=100 step=1):
    total = 0
        for i in range(start, stop+1, step):
	        total += i
		    return total

print("0 부터 100 까지 합을 구함 :",sum_func())
print("0 부터 100 까지 짝수의 합을 구함 :",sum_func(spet=2))
print("0 부터 100 까지 홀수의 합을 구함 :",sum_func(start=1, step=2))
print("0 부터 50 까지 홀수의 합을 구함 :",sum_func(start=1, stop=50, step=2))

# 2. 함수의 활용 : 자기 함수 호출 -> 재귀 함수
#  factorial 함수 정의
def fac_func(n):
    if n == 0 :
            return 1
	        else:
		        return n * fac_func(n-1)

fac_func(0)

# 피보나치를 구하는 함수 작성 : fibo(n) = fibo(n-1) + fibo(n-2), 
#   n==1 or 2이면 1
def fibo(n):
    global cnt
        cnt += 1
	    if n == 1 or n == 2:
	            return 1
		        else:
			        return fibo(n-1) + fibo(n-2)

cnt = 0
fibo(50)

# 피보나치의 느린 속도를 커버하기 위한 방법
# 메모화 : 메모 변수를 생성
dict_mem = { 1:1, 
            2:1 }

	    cnt = 0
	    def fibo_mem(n):
	        global cnt
		    cnt += 1
		        if n in dict_mem:
			        return dict_mem[n]
				    else:
				            output = fibo_mem(n-1) + fibo_mem(n-2)
					            dict_mem[n] = output
						            return output
							        
								fibo_mem(100)

# 3. 함수 고급 : tuple -> (), lambda 함수
(a, b) = (10, 20)
print(a)

a, b = b, a
print(a, b)

def test():
    return 10, 20

    a, b = test()
    print(a, b)

# tuple -> a_tuple = (10, 20, 30) -> 자료의 수정 불가
for i, value in enumerate([1,2,3,4]):
    print("{}번째의 값{}".format(i, value))
        
	a_tuple = (10, 20, 30)
	for value in a_tuple:
	    print("tuple의 값 : ", value)
	    #a_tuple[0] = 10  # error , tuple은 자료 수정 불가

# 람다 : lambda
# 함수의 매개변수로 함수명 전달하기
def call_times(func):
    for i in range(5):
            func()
	    def print_hello():
	        print("Hello")
		    
		    call_times(print_hello)

def power(item):
    return item * item
    def under_3(item):
        return item < 3

# map(함수명, 리스트) -> 리스트의 각각의 값을 함수에 적용
# filter(함수명, 리스트) -> 함수에 조건식으로 return
input_list = [1,2,3,4,5]

output = map(power, input_list)
print(list(output))

print(list(filter(under_3, input_list)))

# lambda 매개변수 : 리턴 값
input_list = [1,2,3,4,5]

output = map(lambda x: x*x, input_list)
print(list(output))

print(list(filter(lambda x: x < 3, input_list)))

# 파일 처리 : open(), file.write(), file.close(), file.read()
# 현재 경로에서 새로운 디렉토리 dataset 을 생성 
# dataset 안에 새로운 파일 test.txt 파일을 생성
# test.txt 파일에 'hello python programming'을 작성하고 파일 close

!mkdir dataset

file = open('./dataset/test.txt', 'w')
file.write('hello python programming')
file.close()

file = open('./dataset/test.txt', 'r+')
contents = file.read()
print(contents)
file.write('\nhello python programming read')
file.close()

# file open with 와 같이 사용 -> with 종료시 자동으로 파일 close 됨
with open('./dataset/test.txt', 'r+') as file:
    contents = file.read()
    print(contents)
    #file.write('test') # error

import os 
os.getcwd()    # 현재 디렉토리의 전체 Full 경로 보여줌

# 제너레이터 함수 작성 : 함수 내부에 yield 키워드를 사용 
def gen_test():
    print('First ')
        yield 1
	    
	        print("Second ")
		    yield 2
		        
			    print("Third ")
			        yield 3
				    
				    o_func = gen_test()
				    print("main start ")
				    a = next(o_func)
				    print(a)

				    print("main 111 start ")
				    a = next(o_func)
				    print(a)

				    print("main 222 start ")
				    a = next(o_func)
				    print(a)

books = [{"제목":"혼자 공부하는 파이썬", "가격":18000},
        {"제목":"혼자 공부하는 파이썬", "가격":26000},
	        {"제목":"혼자 공부하는 파이썬", "가격":24000}]

		# 가격이 가장 저렴한 책의 정보 출력
		print(min(books, key=lambda book: book['가격']))

		# 가격이 가장 비싼 책의 정보 출력
		print(max(books, key=lambda book: book['가격']))

def 가격추출함수(book):
    return book['가격']

    min(books, key = 가격추출함수)

books.sort(key=lambda book: book['가격'])
for book in books:
    print(book)

a = [1,2,3,4,5]
b = a
b[1] = 100
a

c = a.copy()
c[1] = 300
print("a : ", a) # a[1] -> 100
print("c : ", c) # c[1] -> 300

# 실행 오류 : try ~ except ~ else ~ finally 
# 실행 오류가 발생할 수 있는 코드 작성
try:
    input_num = int(input("정수 입력 :"))
        
	    print("원의 반지름 : ", input_num)
	        print("원의 반지름 : ", input_num *2 *3.14)
		except:
		    print("정수가 입력되지 않음")

# # 실행 오류가 발생할 수 있는 코드 작성

# try:
#     예외 발생 코드
# except:
#     예외 발생시 실행 코드
# else:
#     정상 작동시 실행 코드
    
    try:
        input_num = int(input("정수 입력 :"))
	except:
	    print("정수가 입력되지 않음")
	    else:
	        print("원의 반지름 : ", input_num)
		    print("원의 둘레 : ", input_num * 2 * 3.14)
		    finally:
		        print("program end !!")  # 무조건 실행 

# file 처리시 예외 처리 응용
try:
    file = open('./dataset/try.txt', 'w')
        input_data = input("이름 성적 입력").split()
	    score = int(input_data[1])
	        file.write("input_data" + str(score))
		except Exception as e:
		    print("입력 자료 검증",e)
		    else:
		        print("정상 입력")
			finally:
			    print("try end !!")
			        file.close()
				    
				    # file.write('\nend\n')
				    file.closed

while True:   
    try:
            print("try 구문 실행 ")
	            break
		        except:
			        print("except 구문 실행")
				    else:
				            print("else 구문 실행")
					        finally:
						        print("try end !!")
