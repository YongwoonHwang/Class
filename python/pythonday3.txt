# 딕셔너리 선언 : {키:값, ...}, 리스트 [값, ...]
dict_a = { 'name':'홍길동', 'age' : '30'}

print(dict_a)
print(type(dict_a))

name = '키'
dict_b = {"name":"10"}
dict_b

# 딕셔너리에 값 추가 / 제거 하기 : 딕셔너리[키] = 값
# 삭제는 del 딕셔너리[키]
dict_a['title'] = '딕셔너리'
dict_a

del dict_a['name']
dict_a

#list_a = []
#list_a.append()

#dict_c = {}
#dict_c['키'] = 값

# 키보드에서 이름과 성적을 입력 받아 이름을 키로 성적을 값으로 딕셔너리에 저장
# 이름에 'q' 가 입력되면 입력 종료 
# 저장된 자료를 출력
score_dict = {}
while True:
    input_a = input("이름 :")
        
	    if input_a == 'q' :
	            print('program end !!')
		            break
			        input_b = int(input("성적 :"))
				    score_dict[input_a] = input_b
				            
					    print(score_dict)

# 검색하고자 하는 이름을 입력 받아 입력된 자료에 존재하면 이름과 성적 출력
# 존재하지 않으면 '존재하지 않는 이름' 이라고 출력
search_name = input("검색하고자 하는 이름 입력 :")
if search_name in score_dict:
    print("{}의 성적은 {} 입니다".format(search_name, score_dict[search_name]))
    else:
        print("{}의 자료는 없습니다".format(search_name))

# 키의 값이 있는지 확인하는 함수 : 딕셔너리.get(키) ->값을 반환
search_name = input("검색하고자 하는 이름 입력 :")
value = score_dict.get(search_name)
if value:
    print("{}의 성적은 {} 입니다".format(search_name, value))
    else:
        print("{}의 자료는 없습니다".format(search_name))

# for 반복문과 같이 사용 : for key in dict:
# for문을 사용하여 딕셔너리의 자료 출력
for key in score_dict:
    print(f"{key} : {score_dict[key]}")
    # value = score_dict.get(key)
    # print(f"{key} : {value}")

# 딕셔너리의 키와 값을 동시에 가져오는 함수 : 딕셔너리.items()
for key, value in score_dict.items():
    print(f"{key} : {value}")
    #score_dict.keys()
    score_dict.values()

# 키가 존재하는지 확인 : key in 딕셔너리 -> 딕셔너리의 키에 key가 있는지 확인
print('a' in score_dict) #True
print('name' in score_dict) #False

# 이름과 국어, 영어, 수학 성적을 입력 받아 딕셔너리에 저장한 후 
# students -> 이름, 국어, 영어, 수학 성적, 이름을 키로 
# 학생별로 성적의 총합, 평균을 출력
# 전체 학생의 인원수, 과목별 평균을 구하세요
students = {}
 
 while True:
     name = input("이름 입력 : ")
         if name == 'q':
	         print("입력 종료 !!")
		         break
			     scores = input(" 국어 영어 수학 성적 입력 (ex : 90 80 90)").split()
			         if len(scores) !=3 :
				         continue
					     score_list = []
					         for score in scores:
						         score_list.append(int(score))
							     students[name] = score_list

							     students

#학생별로 성적의 총합, 평균을 출력
# 1. 딕셔너리의 자료를 가져와서 총합 평균 출력
print("{:6}{:6}{:6}".format('이름', '총점', '평균'))

for key, scores in students.items():
    total = 0 # 학생의 총점을 초기화
        for score in scores:    # 리스트의 각 점수를 가져 옴
	        total += score      # 누적 합 구함
		    print("{:6}{:6d}\t{:6.2f}".format(key, total, total/len(scores)))
		        
			# 전체 학생의 인원수, 과목별 평균을 구하세요
			scores = students.values()
			tot_score = [0, 0, 0]
			for score in scores:
			    idx = 0
			        for sub_score in score:      # 각 과목별 평균을 구하기 위해 인덱스를 0,1,2로 반복
				        tot_score[idx] += sub_score
					        idx += 1
						    
						    #각 과목별 평균
						    print("학생수 : {}".format(len(students)))
						    for tot in tot_score:
						        print("{:3.2f}".format(tot/3), end = '\t')

# 전체 학생의 인원수, 과목별 평균을 구하세요
scores = students.values()
tot_score = [0, 0, 0]
for score in scores:
    for dix,sub_score in enumerate(score):  # 인덱스와 값을 반환하는 함수
            tot_score[idx] += sub_score

#각 과목별 평균
print("학생수 : {}".format(len(students)))
titles = ['국어', '영어', '수학']
for dix, tot in enumerate(tot_score):
    print("{} : {:3.2f}".format(titles[dix], tot/3), end = '\t')

# 0 부터 100까지의 수 중에서 5의 배수만 출력
# range() 함수 사용 
line_cnt = 0
for ex_1 in range(0, 101, 5):
    line_cnt += 1
        if line_cnt%5 == 0:
	        print(ex_1)
		    else:
		            print(ex_1, end = '\t')
			            
				    print()

num_list = [3,4,1,5,7]
for i in range(len(num_list)):
    print("{}번째 값 : {}".format(i, num_list[i]))
    print("enumerate 함수를 활용하여 위치 확인")
    for i, value in enumerate(num_list):
        print("{}번째 값 : {}".format(i, value))


for line_cnt, ex_1 in enumerate(list(range(0, 101, 5))):
    if (line_cnt + 1) % 5 == 0:
            print(ex_1)
	        else:
		        print(ex_1, end ='\t')

dict_a = {
    'aa' : [ 90, 80, 70 ],  
        'bb' : [ 80, 99, 88 ],
	    'cc' : [ 77, 88, 99 ],}
	    print(dict_a.values())   # [[ 90, 80, 70 ], [ 80, 99, 88 ], [ 77, 88, 99 ]]

	    tot_score = [0, 0, 0]
	    for score in dict_a.values():
	        print(score)
		    idx = 0
		        for i in score:
			        tot_score[idx] += i
				        print(f"{idx}:{tot_score[idx]}")
					        idx += 1
						        
							# idx 대신 enumerate() 함수를 사용 
							tot_score = [0, 0, 0]
							for score in dict_a.values():
							    print(score)
							        for idx, i in enumerate(score):
								        tot_score[idx] += i
									        print(f"{idx}:{tot_score[idx]}")

# 1. 키보드에서 이름을 입력 받아 'q'가 입력되면 입력 종료
#   아니면 국어 영어 점수를 입력받아 저장
#   입력받은 점수의 갯수가 2가 아니거나 숫자가 아니면 다시 입력

students = {}
while True:
    keyboard_a = input("이름 입력: ")
        if keyboard_a[0] == 'q':
	        print("입력 종료")
		        break
			    keyboard_b = input("국어 영어 점수 입력(ex.80 90): ").split()
			        keyboard_list = []
				    for keyboard in keyboard_b:
				            if keyboard.isnumeric():
					                keyboard_list.append(int(keyboard))
							        else:
								            break
									                
											    if len(keyboard_b) != 2 :
											            print("점수를 다시 입력 하세요(ex.80 90)")
												            continue
													            
														        students[keyboard_a] = keyboard_list
															            

																    students


# 2. 입력 종료 후 검색 하고자 하는 이름을 입력 받아 검색 된 이름의 성적과, 
#   총점, 평균 출력
# 3. 총 입력된 학생의 인원 수 출력
# 4. 전체 학생의 성적의 합계를 기존의 자료에 추가 
# 5. 최고점을 받은 학생의 정보 출력

print("{:6} {:6} {:6} {:6}".format("이름", "국어", "영어", "평균"))

for key, keyboard_b in students.items():
    total = 0
        for keyboard in keyboard_b:
	        total += keyboard
		    print("{:6}{}\t{:6} \t{:8}".format(key, total, total/len(keyboard_b), (total+total/len(keyboard_b))/2))   
		        
# while 표현식 : -> 표현식이 True이면 실행 
i = 1
total = 0
while i < 11:
    total += i 
        i += 1
	print(total)

list_test = [1, 2, 1, 2]
value = 2
# list_test의 값에서 2를 제거 
while value in list_test:
    list_test.remove(value)
    print(list_test)

list_news = ['q', '!', 'abd', 'def']

# list_news 에서 숫자와 '\n'을 제거
list_news = list(list_news)
value = '\n'
while value in list_news:
        list_news.remove(value)
	list_news = str(list_news)

#list_news 에서 숫자와 '!를 제거 
while '!' in list_news:
    list_news.remove('!')
        list_news
remove_str = ['1','2','3','4']
for value in remove_str:
    while value in list(list_str):
            list_str.remove(value)
# python의 데이터 타입 : 문자, 숫자, 불리언
# 자료의 집합 : list -> [, ...], dictionary -> {키:값, ...}
# list[위치 인덱스], dict[키]
# 자료 추가 -> list.aqqend(), dict[키] = 값
# 자료 수정 -> list[위치인덱스] = 값, dict[키] = 값
# 자료 삭제 -> list.pop(), list.remove(값), del list[위치 인덱스]
#     del dic[키]

# 반복문(for문)과 같이 사용 
# for value in list: -> 리스트의 각 요소가 value로 저장 됨
# for key in dict: -> 딕셔너리의 키가 key로 저장 됨

# for idx, value in enuerate(리스트) -> 위치(idx)와 값(value)이 저장됨
# for key, value in dict.items() -> 키(key)와 값(value)이 저장됨

# dict.get(키) -> 값이 반환됨

# while True 조건인 경우 : 실행 

# 반복문 탈출 명령어 -> break:반복문 탈출, continue:반복문 조건식으로 이동
# 반복문에서 누적합 등을 구하고자 할 경우
# 초기화는 반복문 시작 전에 
tot = 0
for i in range(11):
    tot += i
    print("0부터 10까지의 합은 {}".format(tot))

while True:
    input_char = input("자료 입력 : q 또는 Q를 입력시 종료")
        if input_char in['q', 'Q']:
	        break
		    if input_chr == 'q' or input_char == 'Q'
# time 모듈과 반복문 사용하기
import time

cnt = 0
t_time = time.time() + 3
while time.time() < t_time:
    cnt += 1
    print("3초동안 {}번 실행".format(cnt))

# min(), max(), sum()
list_a = [10, 30, 40]
print(min(list_a))
print(max(list_a))
print(sum(list_a))

list_str = ['abcd', 'test', 'ke']
print(min(list_str))
print(max(list_str))
# print(sum(list_a))

# 반복문을 사용한 리스트 생성
array = []
# 반복문을 사용하여 리스트 데이터 추가
for i in range(0,20,2):
    array.append(i*i)
    print(array)

# 리스트 내포 : 리스트 선언 안에 for 문장 사용 
# [ 표현식 for 반복자 in 반복할 수 있는 자료 ]
array_1 = [i*i for i in range(0,20,2)]
array_1 

# 리스트 내포 : 리스트 선언안에 for문장 사용, 조건식과 같이 사용
# [표현식 for 반복자 in 반복할 수 있는 자료 if 조건문]
array_1 = [ i*i 
           for i in range(0,20)
	              if i%2 == 0]
		      array_1
# 문장이 길어질 때 () 하나의 문장으로 인식 
number = int(input("정수 입력"))
if number % 2 == 0:
    print("입력한 문자열은 {}입니다\n"
              "{}는 짝수입니다."
	                .format(number, number))

# 문자열.split() => space로 분리
# 리스트를 하나의 문자열로 전환
print(list_str)

# 리스트를 하나의 문자열로 연결 문자를 '-'
join_str = '::'.join(list_str)

split_list = join_str.split('::')
split_list

