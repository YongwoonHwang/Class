# 시리즈의 개별 원소에 함수 매핑 : 시리즈.apply (매핑함수)
import pandas as pd
import seaborn as sns

titanic = sns.load_dataset('titanic')

# titanic 에서 'age'와 'fare' 컬럼만 추출해서 df 생성 
df = titanic.loc[ : , ['age', 'fare']]
df.head()

# 매핑할 함수 정의 : 10을 더해서 return 하는 함수 정의 
def add_10(n): 
    return n + 10
# 두개의 값을 받아 두 수의 합을 return 하는 함수 정의 
def add_two_obj(a, b):
    return a + b
print(add_10(20))  # 10 + 20 의 값을 출력 
print(add_two_obj(10,20))   # 10 + 20의 값을 출력 

# df의 'age' 컬럼에 10을 더한 결과를 sr1에 저장 후 데이터 확인 
sr1 = df['age'].apply(add_10)
sr1.head()

sr2 = df['age'].apply(add_two_obj, b=10)
sr2.head()

# lambda 함수로 정의 
sr3 = df['age'].apply(lambda x : add_10(x))
sr3.head()

# lambda 함수를 바로 정의해서 사용 
sr4 = df['age'].apply(lambda x : x + 10)
sr4.head()

# 데이터프레임의 각 원소에 함수 매핑 : 데이터프레임.applymap (매핑함수)
df_map = df.applymap(add_10)
df_map.head()

# 데이터프레임 각 원소에 함수 매핑 : 데이터프레임.apply(매핑함수, axis=0
df_1 = df.apply(add_10, axis=0)
df_1

# 각 행을 더한 결과 출력 -> 두 컬럼의 합계를 구함 
df_2 = df.apply(lambda x : (x['age'] + x['fare']), axis=1)
df_2

print(df.iloc[880:890, :])
df_2.tail()

add_10(df)

# 데이터프레임 객체에 함수매핑 : 데이터 프레임. pipe (매핑함수)
# 각 열의 Nan 자료를 찾아 -> df 반환
def missing_value(x):
    return x.isnull()
# 각 열의 Nan 갯수 반환 : 데이터프레임 -> 시리즈 반환
def missing_count(x):
    return missing_value(x).sum()
# 데이터 프레임 Nan의 총 갯수 : 값을 반환
def total_number_missing(x):
    return missing_count(x).sum()
# titanic 에서 5개 행만, survived:age 컬럼만 추출 -> df에 저장
df = titanic.loc[0:4, 'survived':'age']
df


# 컬럼명을 재 배치
df_columns = list(df.columns)
print(df_columns)

df_columns = sorted(df_columns)
print(df_columns)

df_1 = df[df_columns]
df_1

df_2 = df[['pclass', 'age', 'sex', 'survived']]
df_2

# 열 분리 : 하나의 열에 여러 가지 정보를 가지고 있는 경우 각 정보를 분리
df = pd.read_excel('./dataset/주가데이터.xlsx')
df.head()

# 연월일 -> 년, 월, 일로 분리
print(df['연월일'].dtype) # datetime 으로 되어있는 타입을 문자형으로 변경
df['연월일'] = df['연월일'].astype(str)
print(df['연월일'].dtype)   # '2018-07-02'

dates = df['연월일'].str.split('-')
dates

# 시리즈의 문자열 리스트 인덱싱 : 시리즈.str.get(인덱스)
# dates.str.get(2)
df['연'] = dates.str.get(0)
df['월'] = dates.str.get(1)
df['일'] = dates.str.get(2)

df.head()
# 거래월이 6월인 자료만 추출
df.loc[ df['월'] == '06', : ]

# 필터링
# 불린 인덱싱 : True or False 로 해당 행을 가져올지, 아닐지 판단
# 데이터프레임[ 불린 시리즈 ]
# titanic에서 나이가 10세 이상 20세 미만인 자료만 df_1에 저장
bool_mask = (titanic['age'] >= 10) & ( titanic['age'] < 20 )
# df_1 = titanic.loc[ bool_mask, : ]
df_1 = titanic.loc[ (titanic['age'] >= 10) & ( titanic['age'] < 20 ), : ]
df_1.head()

# 나이가 20세 미만이고 여성인 승객의 자료만 추출해서 df_2에 저장 
df_2 = titanic.loc[ (titanic['age'] < 20 ) & ( titanic['sex'] == 'female'), :]
df_2.head()

titanic['sibsp'].unique()  # 같이 탑승한 배우자 또는 형제 자매의 수가 3,4,5인 
# 승객의 정보만 추출하여 df_1
mask = (titanic ['sibsp'] == 3) | (titanic['sibsp'] == 4) | (titanic['sibsp'] == 5)
df_1 = titanic.loc[ mask, :]

# 시리즈.isin(리스트)
df_2 = titanic.loc[ titanic['sibsp'].isin([3,4,5]), :]
df_2['sibsp'].unique()
df_2

# 필터링 : bool 리스트, isin(리스트)

# 데이터프레임 합치기
# 1. 데이터프레임 연결 : pd.concat(데이터프레임 리스트)
df1 = pd.DataFrame({'a': ['a0', 'a1', 'a2', 'a3'],
                    'b': ['b0', 'b1', 'b2', 'b3'],
		    'c': ['c0', 'c1', 'c2', 'c3']},
                    index=[0, 1, 2, 3])

df2 = pd.DataFrame({'a': ['a2', 'a3', 'a4', 'a5'],
                    'b': ['b2', 'b3', 'b4', 'b5'],
                        'c': ['c2', 'c3', 'c4', 'c5'],
                    'd': ['d2', 'd3', 'd4', 'd5']},
                        index=[2, 3, 4, 5])

print(df1)
print(df2)

df_result = pd.concat([df1, df2], ignore_index=True)  # 새로운 인덱스 부여
df_result

pd.concat([df1, df2], axis=1)

# join = 'inner' 인덱스가 같은 행만 결합
pd.concat([df1, df2], axis=1, join='inner')

# 시리즈 만들기
sr1 = pd.Series(['e0', 'e1', 'e2', 'e3'], name='e')
sr2 = pd.Series(['f0', 'f1', 'f2'], name='f', index=[3, 4, 5])
sr3 = pd.Series(['g0', 'g1', 'g2', 'g3'], name='g')

sr1
# df1과 sr1을 결합
df_4 = pd.concat([df1, sr1], axis=1)   # 인덱스를 기준으로 결합
df_4

# df2 # 2, 3, 4, 5
# sr2 # 3, 4, 5
df_3 = pd.concat([df2, sr2], axis=1)
df_3

# df2 와 sr3를 inner 로 합치기
# sr1 과 sr3를 df로 생성
pd.concat([df2, sr3], join = 'outer', axis = 1)
pd.concat([sr1, sr3], axis =1)

# merge : 두 개의 데이터프레임을 결합
df1 = pd.read_excel('./dataset/stock price.xlsx')
df2 = pd.read_excel('./dataset/stock valuation.xlsx')

pd.concat([df1, df2], axis = 1)

pd.merge(df1, df2, how='outer')  # sql의 join 명령어와 유사 

# pd.merge(df1, df2, how='inner', on='id')
pd.merge(df1, df2, how='inner') # 처음 컬럼을 기준으로

pd.merge(df1, df2, how='left')  # df1을 기준으로 df1은 다 가져옴
pd.merge(df1, df2, how='right')  # df2를 기준으로 df2는 다 가져옴
pd.merge(df1, df2, how='left', left_on='stock_name', right_on='name')
pd.merge(df1, df2, how='outer', left_on='stock_name', right_on='name')

# df1의 price 컬럼의 값이 50000 미만인 종목의 df2 프레임의 모든 정보 검색
pd.merge(df1.loc[ df1['price'] < 5000, : ], df2)

# join : 데이터프레임1.join(데이터프레임2, how='left')
# 인덱스가 설정이 되어 있어야 함
# 인덱스 기준으로 정렬
# df1 과 df2 데이터프레임의 id 컬럼을 index로 설정
df1.set_index('id', inplace=True)
df2.set_index('id', inplace=True)
# concat과는 다르게 index가 들어가 있어야 한다.


