# numpy : 배열을 처리하기 쉽게 제공하는 모듈
import numpy as np

list_a = list(range(15))
print(type(list_a), list_a)

arr = np.arange(15)   # np.arange(start, stop, step)
print(type(arr), arr)

# 차원 변경 :array.reshape(행, 열)
arr = arr.reshape(3,5)
print(arr.ndim)  # 차원 출력
print(arr.shape)  # 배열의 형태  3, 5
print(arr.size)  # 배열의 전체 데이터 개수
print(arr.dtype.name, arr.dtype.itemsize)  # 데이터 타입의 이름, 저장 사이즈
print(arr)

arr.reshape(arr.size) # 평탄화 - 다차원을 1차원으로 만들어주는 것 

import pandas as pd
df = pd.DataFrame(arr)
df

# 리스트를 array로 변경 : np.array(리스트)
arr_list = np.array(list_a)
print(arr_list)

two_list = np.array([ [1, 2, 3], [4, 5, 6] ])
print(two_list)

# 각 array의 차원, 배열 형식, 전체 사이즈, 데이터타입 출력
print(arr_list.ndim, arr_list.shape, arr_list.size, arr_list.dtype)
print(two_list.ndim, two_list.shape, two_list.size, two_list.dtype)

# array 생성
a = np.empty((3,4))   # 메모리의 공간만 할당, 값은 초기화 시키지 않음
print(a)

# 초기값을 0으로 부여하면서 배열 생성
a = np.zeros((2,3))
print(a)

a = np.zeros((2,3), dtype = 'i')   # 데이터 타입을 int로
print(a, a.dtype.itemsize)

a = np.zeros((2,3), dtype = 'U4')   # 데이터 타입을 문자로
print(a)

a = np.zeros((2,3), dtype = 'f')   # 데이터 타입을 float로
print(a)

a = np.zeros((2,3), dtype = 'i8')   # 데이터 타입을 float로
print(a, a.dtype.itemsize)

# 데이터 초기값을 1로 주면서 배열 생성
a = np.ones((2,3))
print(a)

b = np.zeros_like(a)
print(b)

# array 연산
x1 = np.array([1.0, 2.0, 3.0])
y1 = np.array([5.0, 10.0, 15.0])
x2 = np.array([[1.0, 2.0],[ 3.0, 4.0]]) 
y2 = np.array([[5.0,10.0],[15.0,20.0]]) 
z1 = np.array([-1.0, -2.0])
z2 = np.array([[5.0],[10.0],[15.0]])

# array basic 연산
print(x1 + y1)
print(x2 * y2)
print(y2 / z1)

# array broadcast 연산
print(z1 + z2)
print(x1 ** 2)
print(x1 >= 2)

# shape
# x2 = np.array([[1.0, 2.0], [3.0, 4.0]])
x2.reshape(x2.size)
x2.flatten()   # 1차원으로 평탄화

x2 = np.array([[1.0, 2.0],[ 3.0, 4.0]]) 
x2.reshape(x2.size)

x2.flatten()

x2 = np.arange(20)
x2.reshape(2,2,5).reshape(4,5).flatten()

# indexing, slicing, iterating
a = np.arange(10) ** 2
print(a)

# 2번째 자료 출력
print(a[2])

# 4부터 16까지 출력 
print(a[2 : 5])  # [ start : stop ] stop 포함하지 않음

# 처음부터 끝까지 2칸씩 증가시키면서 출력 
print(a[ : : 2 ])

a[0 : 6 : 2] = -a[0 : 6 : 2]
print(a)

# 뒤에서 부터 출력 
print(a[ : : -1])

# for를 사용하여 값을 출력 
for i in a:
    print(i, end = ' ')
    print()

# 배열을 검색
a = np.arange(1, 21).reshape(4,5)
print(a)

# 배열의 각 원소 검색 : array[행, 열]
print(a[1, 1])

print(a[0 : 2, 1])  # 0행, 1행의 1열만 검색
# 마지막 행과 마지막 열의 자료 출력 
print(a[-1, -1])
# 1행의 모든 열 검색 
print(a[1, : ])
print(a[ : , [1, 3]])
print(a[[1,3], [1, 2]])

#np.ndarray(shape, buffer=)
a = np.ndarray((3,2), buffer=np.arange(6), dtype = int)
a

np.arange(6).dtype.itemsize

a = np.array([[0.1,0.8,0.2,0.4], [0.3,0.2,0.5,0.6],[0.9,0.5,0.3,0.5]])
print(np.argmax(a, axis=0))
print(np.argmax(a, axis=1))
a = np.array([[[0.1,0.8,0.2,0.4], [0.3,0.2,0.5,0.6]],[[0.5,0.7,0.3,0.1] ,[0.9,0.5,0.3,0.5]], [[0.1,0.3,0.6,0.2] ,[0.9,0.8,0.4,0.5]]])
print(np.argmax(a, axis=0))
print(np.argmax(a, axis=1))
print(np.argmax(a, axis=2))

x = np.array([18,   5,  10,  23,  19,  -8,  10,   0,   0,   5,   2,  15,   8,
              2,   5,   4,  15,  -1,   4,  -7, -24,   7,   9,  -6,  23, -13])

	      print(len(x))
	      print(x.min(), x.max(), x.mean(), x.std(), x.var())
	      print(np.median(x), np.percentile(x, 25), np.percentile(x, 100))

# 난수 생성
# rand : 0 부터 1사이의 균일분포(정규분포)로 난수 생성
# randn: 기댓값이 0이고 표준편차가 1인 가우시안 표준 정규 분포를 따르는 
#           난수를 생성
# randint: 균일 분포의 정수 난수
print(np.random.rand(10))
print(np.random.randn(10))
print(np.random.randint(10, size=10))
print(np.random.randint(10, 20, size=10))

np.random.seed(10)  # 난수 초기화 -> 동일한 난수 발생

print(np.random.randint(10,20, size=(2,5)))

x = np.arange(10)    # 0 ~ 9 까지의 정수 발생, 1차원 배열
print(x)

# 자료의 위치를 바꿈
np.random.shuffle(x)
print(x)

# 샘플링 함수 : choice 함수 
# np.random.choice(data 또는 정수, size=None, replace=True, p=None)
np.random.choice(5, 5, replace=False) # data = np.arange(5), size = 5
# replace=False -> 절대 같은값 출력하지 않음
np.random.choice(5, 3, replace=False) # 5개중에 3개만 선택
np.random.choice(5, 10)   # 반복 허용  replace=True
np.random.choice(5, 10, p=[0.1, 0, 0.2, 0.5, 0.2])

# 다음 행렬과 같은 배열이 있다.
x = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
print(x)
# 이 배열에서 3의 배수를 찾아라.
# 이 배열에서 4로 나누면 1이 남는 수를 찾아라.
# 이 배열에서 3으로 나누면 나누어지고 4로 나누면 1이 남는 수를 찾아라.

x = np.arange(1, 21)
print(x)

print(x[x%3 == 0])
print(x[x%4 == 1])
print(x[(x%3 == 0) & (x%4 == 1)])
