df1.join(df2, how = 'inner')

# 그룹 연산
# 1. 특정 조건에 의해 분리
# 2. 함수 적용 ( 분리된 그룹별로 )
# 3. 2단계의 결과를 하나로 결합

# 분리 : 데이터프레임.groupby(기준이 되는 열)
df = titanic.loc[ :, ['age','sex', 'class', 'fare', 'survived']]
df.info()

# class 함수로 그룹을 형성 
grouped = df.groupby(['class'])  # class별로 그룹을 형성, key와 그룹의 df
print(grouped)
df['class'].unique()

for key, group in grouped:
    print("key : {},  그룹의 자료 수 : {}".format(key,  len(group)))
        print("group : ", group.head(2))
    print(group.loc[(group['sex'] == 'female'), ['sex', 'class']])
        print()

avg = grouped.mean()   # 그룹의 키가 인덱스, 그룹별로 평균함수 출력
avg

# str.get(인덱스),   grouped.get_group(그룹의 키값)
grouped.get_group('First')

# 'sex' 컬럼으로 그룹을 지어 각 그룹별 키와 해당 그룹의 자료를 출력
df_group = df.groupby('sex')
# 각 그룹별 키와 해당 그룹의 자료 출력
for key, group in df_group:
    print("그룹의 값", key)
    print(group.head())
    print()

#'female'의 자료중 'age'가 20세 미만인 자료만 출력
df_female_age  = df_group.get_group('female')
df_age

# 'sex' 와 'class'를 그룹으로 지어 각 그룹의 자료를 출력
df_group2 = df.groupby(['sex', 'class'])
for key, group in df_group2:
    print("그룹의 값", key)
    print(group.head())
    print()

# 'sex' 컬럼으로 그룹을 지어  각 그룹별 키와 해당 그룹의 자료를 출력
df_sex_group = df.groupby('sex')
# 각 그룹별 키와 해당 그룹의 자료 출력
for key, group in df_sex_group:
    print("그룹의 키 값 : ", key)
    print(group.head())
    print()
# 'female'의 자료중 'age' 가 20세 미만인 자료만 출력
df_female_age = df_sex_group.get_group('female')
df_female_age = df_female_age.loc[ df_female_age['age'] < 20, : ]
df_female_age.head()

# 자료 체크 : age 컬럼의 값을 중복 제거하고 가져 옴
# 가져온 자료가 20보다 큰지 확인 -> 리스트 (True, .. False)
# 확인된 자료는 리스트.sum()  -> True인 데이터의 갯수 반환
df_check = df_female_age['age'].unique()
(df_check >= 20).sum()

# 'sex' 와 'class'를 그룹으로 지어 각 그룹의 자료를 출력 
df_sex_class = df.groupby(['sex', 'class'])
for key, group in df_sex_class:
    print("그룹의 키 : ", key)
    print(group.head())
    print()

# 그룹의 키가 'female'이고 'First'인 자료만 추출'

df_sex_class.get_group(('female', 'First'))

# sex 와 class에 대한 그룹에 대해 요금의 평균을 구하세요
df_sex_class['fare'].mean()

# 사용자 정의 함수를 그룹 객체에 적용 : 그룹객체.agg(매핑함수)

agg_max_min = grouped.agg(lambda x : max(x) - min(x))
agg_max_min

# 동시에 여러 개의 함수를 적용 : 그룹객체.agg( [함수1, 함수2, ..])

agg_all = grouped.agg(['min', 'max', 'mean'])
agg_all

# 컬럼마다 다른 함수를 적용 : 그룹객체.agg({'열':함수, '열2': 함수2, ...})
agg_def = grouped.agg( {'sex' : 'min', 'fare': ['mean', 'std'] })
agg_def

# 그룹 연산 데이터 변환 : group객체.tansform(매핑함수)

age_std = grouped['age'].std()
age_mean = grouped['age'].mean()
print(age_std, age_mean)
for key, group in grouped['age']:
    group_zscore = (group - age_mean.loc[key])/age_std.loc[key]
    print("key : ", key)
    print(group_zscore.head())
    print()

def z_score(x):
    return (x - x.mean()) / x.std()
# 그룹 각 데이터에 대한 그룹함수 연산이 가능 : 그룹객체.transform(매핑함수)
# grouped['age'].transform(z_score)
grouped[['age', 'fare']].transform(lambda x: (x - x.mean()) / x.std())
# grouped['age'].transform(lambda x: (x - x.mean()) / x.std())[[1,9,0]]

# 그룹 객체 필터링 : 그룹객체.filter( 조건 함수 )
# 클래스별 승객의 수가 200 이상인 클래스의 자료만 출력 
grouped_filter = grouped.filter(lambda x: len(x) >= 200)
grouped_filter['class'].unique()

# 그룹별로 'age' 평균이 30 미만인 그룹의 자료만 출력
age_filter = grouped.filter(lambda x : x.age.mean() < 30)
age_filter

# 그룹 객체에 함수를 매핑 : 그룹객체.apply(매핑 함수)
grouped.apply(lambda x: x.describe())

grouped['age'].apply(lambda x: (x - x.mean()) / x.std())[[1,9,0]]

age_filter = grouped.apply(lambda x : x.age.mean() < 30)
age_filter
for x in age_filter.index:
    if age_filter[x] == True:
        age_filter_df = grouped.get_group(x)
	print(age_filter_df.head())
	print()

# 멀티 인덱스
grouped = df.groupby(['class', 'sex'])

gdf = grouped.mean()
gdf

# class가 'First'인 자료만 검색
print(gdf.loc['First'])

# class가 'First' 이고 sex가 'female'
print(gdf.loc[('First', 'female')])
print()

# sex가 'male'의 자료만 검색 : 두번째 인덱스를 검색하고자 할 경우
# 멀티인덱스가 있는 객체명.xs( 인덱스 값, level=인덱스명)
gdf.xs('male', level='sex')

gdf.xs('First', level =0)

df_1 = df.copy()
df_1.set_index(['class', 'sex'], inplace = True)
df_1

# 클래스가 'First' 이고 sex가 'male' 자료만 출력
# df_1.loc[('First', 'male')]

df_1.xs(( 'male', 'First'), level=(1,0))

# 피벗 테이블 
df.head()

# 피벗 테이블 : pd.pivot_table( df, 열, 컬럼, 집계함수, ...)
pdf1 = pd.pivot_table(df,  # 피벗에 사용 된 데이터프레임
                     index = 'class', # 그룹에 사용될 컬럼
		     columns = 'sex',  # 열 위치에 들어갈 컬럼명
		     values = 'age', # 데이터로 사용될 컬럼
		     aggfunc = 'mean')
pdf1

print(pdf1.index)
print(pdf1.columns)

print(pdf1.xs('First'))    # class 가 First인 자료만
print()
print(pdf1.xs(('First', 'male')))  # class -> First, sex -> male
print()
print(pdf1.xs('male', level='sex'))  # sex -> mail

pdf1

# max, fare, 1인 컬럼의 자료 
pdf1.xs(('max', 'fare', 1), level=[0,1,2], axis=1)

pdf1.xs('min', axis=1)   # 열 인덱스가 min인 데이터를 선택


