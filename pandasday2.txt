# ./dataset/read_csv_sample.csv
import pandas as pd 

file_path = './dataset/read_csv_sample.csv'
df = pd.read_csv(file_path)
df

df = pd.read_csv(file_path, header=None)  #  컬럼명 없이 모두 데이터로 처리
df

df = pd.read_csv(file_path, index_col = 'c1')  # 인덱스를 'c1'컬럼의 값으로 지정
df

df = pd.read_csv(file_path, skiprows=1, names=['a', 'b', 'c', 'd']) #컬럼명 부여
df

df.to_csv('./dataset/test.csv',sep=':', index=False)

df = pd.read_csv('./dataset/test.csv', sep=':')
df

df = pd.read_excel("./dataset/남북한발전전력량.xlsx")
df

df = pd.read_excel("./dataset/남북한발전전력량.xlsx", header=None)
df

df = pd.read_json('./dataset/read_json_sample.json')
df

tables = pd.read_html('./dataset/sample.html')
tables

print(len(tables))

for i in range(len(tables)):
    print(tables[i])
        print()
	    
	    # 1번 위치에 있는 테이블을 데이터프레임으로 가져옴,
	    # 인덱스 컬럼을 name으로 설정
	    df = tables[1]
	    df.set_index('name', inplace=True)
	    df

data1 = {'name': ['Jerry', 'Riah', 'Paul'],
'algol': ['A', 'A+', 'B'],
'basic': ['C', 'B', 'A'],
'c++': ['B+', 'A', 'C']}
data2 = {'c0': [1,2,3],
'c1': [4,5,6],
'c2': [7,8,9],
'c3': [10,11,12],
'c4': [13,14,15]}

df1 = pd.DataFrame(data1)
df2 = pd.DataFrame(data2)

df2

# df1의 name을 인덱스 컬럼으로
df1.set_index('name', inplace=True)
# df2의 c0를 인덱스 컬럼으로
df2.set_index('c0', inplace=True)

# df1을 엑셀의 'sheet1'로, df2를 'sheet2'로 df_excel.xlsx로 파일 생성
# 1. file을 ExcelWriter로 file 포인터 지정
# 2. sheet를 저장
# 3. file.save() # 파일 저장 -> close
file = pd.ExcelWriter('./dataset/df_excel.xlsx')
df1.to_excel(file, sheet_name='sheet1')
df2.to_excel(file, sheet_name='sheet2')
file.save()

# 데이터 프레임 구조 보기
# dataset/auto-mpg.csv 파일을 읽어 df에 저장
# 컬럼명은 ['mpg','cylinders','displacement','horsepower','weight',
#              'acceleration','model year','origin','name'] 로 지정

df = pd.read_csv('dataset/auto-mpg.csv', header=None)
df

# 컬럼명 지정 df.columns = [컬럼명, ...]
df.columns = ['mpg','cylinders','displacement','horsepower','weight',
              'acceleration','model year','origin','name']
	      df

	      # 처음 나오는 5개의 정보 확인
	      # 마지막에 나오는 3개의 정보 확인

	      print(df.head(5))
	      df.tail(3)

# 데이터 프레임의 기본 정보 확인 : df.info()
df.info()

print(df.columns) # 컬럼명
print(df.dtypes, "mpg type : ", df.dtypes.mpg)  # 각 컬럼의 데이터 타입

# 데이터프레임의 통계 정보 확인
df.describe()  # 숫자 정보가 있는 컬럼에 대한 통계 정보 보여 줌 

df.describe(include = 'all')

df.shape

df.count() # 각 컬럼별로 데이터 개수 출력, Nan 은 개수에 넣지 않음

# 각 열의 고유값 개수 확인
print(type(df['origin'].value_counts()))
# print(df['mpg'].value_counts())

# 모든 컬럼의 중간값 : df.median()
# df['컬럼명'].median()
# df.median()
# 최대값 : max, 최소값 : min, 표준편차 : std, 분산 : var
# 상관계수 : df[컬럼리스트].corr()
# df.median(numeric_only=True) # 버전마다 경고 문구가 뜰 수 있음 
df.median(numeric_only=True)
df[['mpg', 'weight']].median()

df[['mpg', 'weight', 'cylinders']].corr()

df.corr()

# mpg, weight 컬럼의 데이터 갯수, 중간값, 평균값, 최소값, 최대값,
# 두 컬럼의 상관계수를 구하세요.
# model year 컬럼의 고유값의 개수를 구하세요.

col_list = ['mpg','weight']
print(df[col_list].count())
print(df[col_list].median())
print(df[col_list].mean())
print(df[col_list].min())
print(df[col_list].max())
print(df[col_list].corr())
df['model year'].value_counts()
